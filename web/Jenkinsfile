pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: maven
    image: maven:3.9.9-amazoncorretto-21
    command:
    - /bin/sh
    - -c
    - sleep 999999
    resources:
      limits:
        memory: "2Gi"
        cpu: "1000m"
      requests:
        memory: "1Gi"
        cpu: "500m"
    volumeMounts:
    - name: maven-cache
      mountPath: /root/.m2
    - name: workspace
      mountPath: /workspace
    workingDir: /workspace
    
  - name: kaniko
    image: gcr.io/kaniko-project/executor:v1.23.2-debug
    command:
    - /busybox/sh
    - -c
    - sleep 999999
    resources:
      limits:
        memory: "1Gi"
        cpu: "500m"
      requests:
        memory: "512Mi"
        cpu: "250m"
    volumeMounts:
    - name: workspace
      mountPath: /workspace
    workingDir: /workspace
    # Kaniko는 특별한 권한이 필요할 수 있음
    securityContext:
      runAsUser: 0
      
  volumes:
  - name: maven-cache
    emptyDir: {}
  - name: workspace
    emptyDir: {}
"""
        }
    }
    
    environment {
        // 이미지 이름 설정
        IMAGE_NAME = 'fdc-dust-web-app'
        IMAGE_TAG = "${env.BUILD_NUMBER}-${env.GIT_COMMIT[0..7]}"
        
        // Maven 설정 (리소스 최적화)
        MAVEN_OPTS = '-Xmx1536m -XX:+UseG1GC'
        
        // Kaniko 설정
        KANIKO_CACHE_TTL = '24h'
        KANIKO_VERBOSITY = 'info'
    }
    
    stages {
        stage('Checkout & Setup') {
            steps {
                script {
                    // 블로그에서 언급된 jnlp 컨테이너 경로 문제 해결
                    // workspace 경로를 명시적으로 설정
                    workingDirectory = sh(script: "pwd", returnStdout: true).trim()
                    echo "Working directory: ${workingDirectory}"
                }
                checkout scm
            }
        }
        
        stage('Maven Build & Test') {
            steps {
                container('maven') {
                    script {
                        // Maven 빌드 최적화
                        sh '''
                            echo "Starting Maven build with optimized settings..."
                            echo "Java version:"
                            java -version
                            echo "Maven version:"
                            mvn -version
                            
                            # 의존성 다운로드 (캐시 활용)
                            mvn dependency:go-offline -B
                            
                            # 컴파일 및 테스트
                            mvn clean compile test -B
                            
                            echo "Maven build completed successfully"
                        '''
                    }
                }
            }
        }
        
        stage('Build Docker Image with Kaniko') {
            steps {
                container('kaniko') {
                    script {
                        sh """
                        # Kaniko 환경 확인
                        echo "Kaniko executor location:"
                        ls -la /kaniko/executor
                        
                        # 빌드 컨텍스트 확인
                        echo "Build context contents:"
                        ls -la /workspace/
                        
                        # Kaniko로 이미지 빌드 (블로그 모범 사례 적용)
                        /kaniko/executor \\
                            --context=/workspace \\
                            --dockerfile=/workspace/Dockerfile \\
                            --destination=${IMAGE_NAME}:${IMAGE_TAG} \\
                            --destination=${IMAGE_NAME}:latest \\
                            --no-push \\
                            --cache=true \\
                            --cache-ttl=${KANIKO_CACHE_TTL} \\
                            --single-snapshot \\
                            --verbosity=${KANIKO_VERBOSITY} \\
                            --cleanup
                        """
                    }
                }
            }
        }
        
        stage('Image Verification') {
            steps {
                container('kaniko') {
                    script {
                        sh """
                        # 빌드된 이미지 확인 (로컬에서)
                        echo "Docker images built successfully:"
                        echo "- ${IMAGE_NAME}:${IMAGE_TAG}"
                        echo "- ${IMAGE_NAME}:latest"
                        
                        # 이미지 메타데이터 확인 (가능한 경우)
                        echo "Build completed at: \$(date)"
                        echo "Git commit: ${env.GIT_COMMIT}"
                        echo "Build number: ${env.BUILD_NUMBER}"
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                def imageName = 'fdc-dust-web-app'
                def imageTag = "${env.BUILD_NUMBER}-${env.GIT_COMMIT[0..7]}"
                def buildDuration = currentBuild.durationString
                
                echo "=========================================="
                echo "Build Summary:"
                echo "Status: ${currentBuild.result ?: 'SUCCESS'}"
                echo "Duration: ${buildDuration}"
                echo "Docker Image: ${imageName}:${imageTag}"
                echo "Git Commit: ${env.GIT_COMMIT}"
                echo "=========================================="
            }
        }
        success {
            script {
                def imageName = 'fdc-dust-web-app'
                def imageTag = "${env.BUILD_NUMBER}-${env.GIT_COMMIT[0..7]}"
                
                echo "🎉 Build successful!"
                echo "📦 Docker images created:"
                echo "   - ${imageName}:${imageTag}"
                echo "   - ${imageName}:latest"
                echo "💡 Images are built locally (not pushed to registry)"
                echo "💰 Spot instance optimization applied"
            }
        }
        failure {
            script {
                echo "❌ Build failed!"
                echo "🔍 Check the logs above for details"
                echo "💡 Consider retrying the build"
            }
        }
        unstable {
            script {
                echo "⚠️ Build unstable - some tests may have failed"
            }
        }
        cleanup {
            script {
                echo "🧹 Cleaning up workspace..."
                cleanWs()
            }
        }
    }
}
