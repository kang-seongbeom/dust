pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:v1.23.2-debug
    tty: true
    command:
    - /busybox/sleep
    - infinity
    resources:
      requests:
        memory: "13.5Gi"
      limits:
        memory: "13.5Gi"
    volumeMounts:
      - name: registry-credentials
        mountPath: /kaniko/.docker
  volumes:
    - name: registry-credentials
      secret:
        secretName: docker-hub-secret
        items: 
        - key: .dockerconfigjson
          path: config.json
"""
            defaultContainer "kaniko"
        }
    }
    
    environment {
        // 이미지 이름 설정
        DOCKER_HUB_USER = 'qkfka9045'
        IMAGE_NAME = 'fdc-dust-web-app'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout & Setup') {
            steps {
                script {
                    def workingDirectory = sh(script: "pwd", returnStdout: true).trim()
                    echo "Working directory: ${workingDirectory}"
                }
                checkout scm
            }
        }
        stage('Build Docker Image with Kaniko') {
            steps {
                dir('web'){
                    container(name: "kaniko", shell: "/busybox/sh") {
                        script {
                            def dockerfileDir = './Dockerfile'
                            sh """
                            /kaniko/executor \
                                --compressed-caching=false \
                                --context . \
                                --dockerfile=${dockerfileDir} \
                                --destination ${DOCKER_HUB_USER}/${IMAGE_NAME}:${IMAGE_TAG}
                            """
                        }
                    }
                }
            }
        }
        stage('CD') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'fdc', usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_PASSWORD')]) {
                    script {
                        // Git 설정 및 인증
                        sh """

                        echo "GITHUB_USER: ${GITHUB_USER}"
                        echo "GITHUB_PASSWORD: ${GITHUB_PASSWORD}"

                        git config --global user.name "Jenkins CI"
                        git config --global user.email "jenkins@example.com"
                        
                        # Username/Password로 GitHub 인증
                        git remote set-url origin https://${GITHUB_USER}:${GITHUB_PASSWORD}@github.com/kang-seongbeom/dust.git

                        git switch cd || git switch -b cd
                        
                        sed -i "s|image: ${DOCKER_HUB_USER}/${IMAGE_NAME}:.*|image: ${DOCKER_HUB_USER}/${IMAGE_NAME}:${IMAGE_TAG}|g" cd/deployment.yaml                        

                        git add .
                        git commit -m "Update deployment image to ${DOCKER_HUB_USER}/${IMAGE_NAME}:${IMAGE_TAG} [Build #${env.BUILD_NUMBER}]"
                        git push origin cd
                        """                            
                    }
                }
            }
        }
    }
    

}
